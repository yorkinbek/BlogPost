package main

import (
	"fmt"
	"log"
	"net"

	"yorqinbek/microservices/Blogpost/auth_service/config" // docs is generated by Swag CLI, you have to import it.
	"yorqinbek/microservices/Blogpost/auth_service/protogen/blogpost"
	"yorqinbek/microservices/Blogpost/auth_service/services/auth"
	"yorqinbek/microservices/Blogpost/auth_service/storage"
	"yorqinbek/microservices/Blogpost/auth_service/storage/postgres"

	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html
func main() {
	cfg := config.Load()

	psqlConnString := fmt.Sprintf(
		"host=%s port=%d user=%s password=%s dbname=%s sslmode=disable",
		cfg.PostgresHost,
		cfg.PostgresPort,
		cfg.PostgresUser,
		cfg.PostgresPassword,
		cfg.PostgresDatabase,
	)
	var err error
	var stg storage.StorageI
	stg, err = postgres.InitDB(psqlConnString)
	if err != nil {
		panic(err)
	}

	println("gRPC server tutorial in Go")

	listener, err := net.Listen("tcp", cfg.GRPCPort)
	if err != nil {
		panic(err)
	}

	srv := grpc.NewServer()

	authService := auth.NewAuthService(cfg, stg)
	blogpost.RegisterAuthServiceServer(srv, authService)

	reflection.Register(srv)

	if err := srv.Serve(listener); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}
